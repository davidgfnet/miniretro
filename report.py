#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2021 David Guillen Fandos <david@davidgf.net>
# Released under the GPL2 license

# This script generates reports based on runs generated by regression.py

import os, base64, argparse, json, hashlib, gzip, re
from jinja2 import Template

badimg = base64.b64decode(
  'iVBORw0KGgoAAAANSUhEUgAAAPAAAACgAQMAAAAIFXMmAAAABlBMVEUAAAD///+l2Z/dAAAAXU'
  'lEQVRYw+3UsQ2AMAxE0ZMYgJGyekbKBqZIkEGC6FLQoP8Ly/LrrZgmeMZNl2CXt7HUPUIFXuc+'
  'YItT4FWWJME2ZxWGYfgf3M6PB/vcj7nBDmcw/CHrFmzxS/BjBzWK2rwwPc8mAAAAAElFTkSuQmCC')

parser = argparse.ArgumentParser(prog='report.py')

subparsers = parser.add_subparsers(dest="subparser", title='command', description='valid subcommands', help='additional help')
reportp = subparsers.add_parser('report')
comparep = subparsers.add_parser('compare')
pcomparep = subparsers.add_parser('perf-compare')

reportp.add_argument('--results', dest='results', required=True, help='Result directory to extract data from')
reportp.add_argument('--output', dest='output', required=True, help='Output report file')
reportp.add_argument('--imgcnt', dest='imgcnt', type=int, default=10, help='Number of images to show')
comparep.add_argument('--results', dest='results', nargs='+', help='Result directories to compare data from')
comparep.add_argument('--output', dest='output', required=True, help='Output report file')
comparep.add_argument('--onlydiff', dest='onlydiff', type=bool, default=False, help='Only report differences')
comparep.add_argument('--imgcnt', dest='imgcnt', type=int, default=3, help='Number of images to show')
pcomparep.add_argument('--results', dest='results', nargs='+', help='Result directories to compare data from')
pcomparep.add_argument('--output', dest='output', required=True, help='Output report file (CSV)')
args = parser.parse_args()

t = Template(open("report.html", "r").read())

def read_results(path):
  resjfile = os.path.join(path, "results.json")
  if not os.path.exists(resjfile):
    return None

  romres = json.load(open(resjfile))
  images = sorted([f for f in os.listdir(os.path.join(path)) if f.endswith(".png")])[-args.imgcnt:]
  romres["images"] = [
    {
      "data": (open(os.path.join(path, im), "rb").read()) if im else badimg,
      "name": im,
    }
    for im in images]
  romres["imagehashes"] = b"".join(hashlib.sha256(x["data"]).digest() for x in romres["images"])
  return romres
  

if args.subparser == "report":
  failed, results = 0, []
  romlist = json.load(open(os.path.join(args.results, "results.json")))

  for romid in romlist:
    res = read_results(os.path.join(args.results, romid))
    results.append(res)
    failed += 1 if res["exitcode"] else 0

  doc = t.render(
    title="Results for %d ROMs" % len(romlist),
    subtitle="Failed: %d" % failed,
    compare=False,
    results=results,
    base64fn=lambda x: base64.b64encode(x).decode("ascii"))
  with open(args.output, "w") as ofd:
    ofd.write(doc)

elif args.subparser == "compare":
  allroms = set()
  for result in args.results:
    romlist = json.load(open(os.path.join(result, "results.json")))
    allroms |= set(romlist)

  # Generate a table that contains all the ROMs and fill in results
  difcnt, allresults = 0, []
  for romid in sorted(allroms):
    results = []
    for result in args.results:
      results.append(read_results(os.path.join(result, romid)))
    romname = [r["rom"] for r in results if r][0]
    differ = len(set([r["imagehashes"] for r in results if r])) > 1
    differ = differ or len(set([r["exitcode"] for r in results if r])) > 1
    difcnt += 1 if differ else 0

    if not args.onlydiff or differ:
      allresults.append({"rom": romname, "results": results, "imgdiff": differ})

  doc = t.render(
    title="Results for %d ROMs" % len(romlist),
    subtitle="Comparing %d runs (with %d roms), resulted in %d differences" % (
      len(args.results), len(allroms), difcnt),
    compare=True,
    results=allresults,
    base64fn=lambda x: base64.b64encode(x).decode("ascii"))
  with open(args.output, "w") as ofd:
    ofd.write(doc)

elif args.subparser == "perf-compare":
  allroms = set()
  for result in args.results:
    romlist = json.load(open(os.path.join(result, "results.json")))
    allroms |= set(romlist)

  # Generate a table that contains all the ROMs and fill in results
  allresults = {}
  for romid in sorted(allroms):
    results = {}
    for result in sorted(args.results):
      res = json.loads(open(os.path.join(result, romid, "results.json")).read())
      romn = res["rom"]
      log = gzip.open(os.path.join(result, romid, "stdout.gz")).read()
      m = re.search(b"Total execution time ([0-9]+) nanoseconds", log)
      rt = int(m.group(1)) if m else None
      results[result] = rt

    allresults[romn] = results

  with open(args.output, "w") as ofd:
    first = list(allresults.keys())[0]
    ofd.write(";" + ";".join(sorted(allresults[first].keys())) + "\n")
    for rom in sorted(allresults):
      ofd.write(rom + ";")
      ofd.write(";".join(str(allresults[rom][r]) for r in sorted(allresults[rom])))
      ofd.write("\n")

