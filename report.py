#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2021 David Guillen Fandos <david@davidgf.net>
# Released under the GPL2 license

# This script generates reports based on runs generated by regression.py

import os, base64, argparse, json

badimg =('iVBORw0KGgoAAAANSUhEUgAAAPAAAACgAQMAAAAIFXMmAAAABlBMVEUAAAD///+l2Z/dAAAAXU'
         'lEQVRYw+3UsQ2AMAxE0ZMYgJGyekbKBqZIkEGC6FLQoP8Ly/LrrZgmeMZNl2CXt7HUPUIFXuc+'
         'YItT4FWWJME2ZxWGYfgf3M6PB/vcj7nBDmcw/CHrFmzxS/BjBzWK2rwwPc8mAAAAAElFTkSuQmCC')

parser = argparse.ArgumentParser(prog='report.py')

subparsers = parser.add_subparsers(dest="subparser", title='command', description='valid subcommands', help='additional help')
reportp = subparsers.add_parser('report')
comparep = subparsers.add_parser('compare')

reportp.add_argument('--results', dest='results', required=True, help='Result directory to extract data from')
reportp.add_argument('--output', dest='output', required=True, help='Output report file')
comparep.add_argument('--results', dest='results', nargs='+', help='Result directories to compare data from')
comparep.add_argument('--output', dest='output', required=True, help='Output report file')
args = parser.parse_args()

def read_results(path):
  resjfile = os.path.join(path, "results.json")
  if not os.path.exists(resjfile):
    return None

  romres = json.load(open(resjfile))
  images = [f for f in os.listdir(os.path.join(path)) if f.endswith(".png")]
  romres["image"] = base64.b64encode(open(os.path.join(path, images[0]), "rb").read()).decode("ascii") if images else badimg
  return romres
  

if args.subparser == "report":
  failed = 0
  romlist = json.load(open(os.path.join(args.results, "results.json")))
  ret =  "<html><body><h1>Results for %d ROMs</h1>" % len(romlist)
  ret += "<h3>Failed: %d</h3>"
  ret += "<table>"
  for romid in romlist:
    res = read_results(os.path.join(args.results, romid))
    ret += "<tr><td>%s</td><td>Exit code: %d</td><td>Runtime: %ds</td><td><img src=\"data:image/png;base64, %s\"/></td></tr>" % (
      res["rom"], res["exitcode"], res["runtime"], res["image"])
    failed += 1 if res["exitcode"] else 0
  ret += "</table></body></html>"
  ret = ret % failed
  with open(args.output, "w") as ofd:
    ofd.write(ret)

elif args.subparser == "compare":
  allroms = set()
  for result in args.results:
    romlist = json.load(open(os.path.join(result, "results.json")))
    allroms |= set(romlist)

  # Generate a table that contains all the ROMs and fill in results
  ret =  "<html><body><h1>Results for %d ROMs</h1>" % len(romlist)
  ret += "<table>"
  ret += "<tr><th>ROM name</th>"
  for result in args.results:
    ret += "<th>%s</th>" % result
  ret += "</tr>\n"
  for romid in sorted(allroms):
    results = []
    for result in args.results:
      results.append(read_results(os.path.join(result, romid)))
    romname = [r["rom"] for r in results if r][0]
    ret += "<tr><td>%s</td>" % romname
    for r in results:
      if r is None:
        ret += "<td>[Missing data]</td>"
      else:
        ret += "<td>Exit code: %d<br/>Runtime: %f<br/><img src=\"data:image/png;base64, %s\"/></td>" % (
          r["exitcode"], r["runtime"], r["image"])
    ret += "</tr>\n"
  ret += "</table></body></html>"
  with open(args.output, "w") as ofd:
    ofd.write(ret)


